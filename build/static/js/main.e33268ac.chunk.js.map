{"version":3,"sources":["App.js","index.js","modules/calculator.js"],"names":["App","useState","error","bigOEst","hotLines","result","setResult","ast","esprima","parse","arr","right","length","middle","Math","floor","code","escodegen","generate","codeSubmit","setCodeSubmit","dataType","setDataType","PageStyle","EditorContainer","value","onValueChange","highlight","languages","js","padding","style","fontFamily","fontSize","background","minHeight","maxWidth","margin","overflow","DataTypeContainer","Select","id","name","onChange","e","target","Button","onClick","getBigO","FlexContainer","ResContainer","href","styled","div","select","button","ReactDOM","render","document","getElementById","require","estraverse","alpha","sets","n","i","j","push","random","str","charAt","count","injectBlockStatements","node","body","unshift","type","expression","left","operator","traverse","enter","modified","replaceAll","counters","eval","c1","c2","c3","n1","n2","n3","console","log"],"mappings":"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","file":"static/js/main.e33268ac.chunk.js","sourcesContent":["// Libraries\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/themes/prism.css';\nimport { esprima, escodegen, estraverse, getBigO } from './modules/calculator'\n\nfunction App() {\n\n    const [result, setResult] = useState({\n        error: \"none\",\n        bigOEst: \"\",\n        hotLines: []\n    });\n\n    // Seed function\n    function binarySearch(arr) {\n        let left = 0, right = arr.length-1;\n        while (left<=right) {\n          let middle = Math.floor((right-left)/2) + left;\n          if (arr[middle] === 30) {\n            return middle\n          }\n          else if (arr[middle] < 30) {\n            right = middle - 1;\n          }\n          else {\n            right = middle + 1;\n          }\n        }\n    }\n    const ast = esprima.parse(`${binarySearch}`);\n    const code = escodegen.generate(ast);\n\n    const [codeSubmit, setCodeSubmit] = useState(code);\n    const [dataType, setDataType] = useState(\"integer\");\n\n    function handleSubmit() {\n        const {error, bigOEst, hotLines} = getBigO(dataType, codeSubmit);\n        setResult({error: error, bigOEst: bigOEst, hotLines: hotLines});\n    }\n\n    return (\n        <PageStyle>\n            <h1>Big O Calculator</h1>\n            <EditorContainer>\n                <Editor\n                    value={codeSubmit}\n                    onValueChange={code => setCodeSubmit(code)}\n                    highlight={codeSubmit => highlight(codeSubmit, languages.js)}\n                    padding={20}\n                    style={{\n                        fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                        fontSize: 17,\n                        background: 'rgb(245,245,245)',\n                        minHeight: 200,\n                        maxWidth: 650,\n                        margin: 'auto auto',\n                        overflow: 'auto',\n                    }}\n                />\n            </EditorContainer>\n\n            <DataTypeContainer>\n                <label>Input data type:</label>\n                <Select id=\"dataType\" name=\"dataType\" value={dataType} onChange={(e)=>setDataType(e.target.value)}>\n                    <option value=\"integer\">int, e.g. 55</option>\n                    <option value=\"array-ints\">array of ints, e.g. [3, 2, 77]</option>\n                    <option value=\"string\">random string, e.g. StRiNgNoNums</option>\n                    <option value=\"array-strs\">array of strings, e.g. ['aa', 'ab', 'ac']</option>\n                    \n                    {/* <option value=\"alpha-num-str\">alpha-numeric string</option> */}\n                    {/* <option value=\"alpha-num-spec-str\">alpha-numeric and special character string</option> */}\n                    {/* <option value=\"array-rand-str\">array of random strings</option> */}\n                </Select>\n                <Button onClick={handleSubmit}>SUBMIT</Button>\n            </DataTypeContainer>\n\n            <FlexContainer>\n                <ResContainer>\n                    <h3>Big O Estimate:</h3>\n                    <p>{result.bigOEst === \"\" ? null : result.bigOEst}</p>\n                </ResContainer>\n                <ResContainer>\n                    <h3>Hot Lines:</h3>\n                    <p>{result.hotLines === [] ? null : result.hotLines[0]}</p>\n                </ResContainer>\n            </FlexContainer>\n            <p>{result.error === \"none\" ? null : result.error}</p>\n            <br/>\n            <h5><em>JavaScript support only</em></h5>\n            <h6><em>Able to compute O(1), O(log(n)), O(n), O(n^2). Pending: O(nlog(n)) and O(n^1/2).</em></h6>\n            <h5><em>Read about the technology that makes this app possible: <a href=\"https://dev.to/aruna/abstract-syntax-trees-theyre-used-everywhere-but-what-are-they-jh6\">Abstract Syntax Trees (ASTs)</a></em></h5>\n            \n        </PageStyle>\n    );\n}\n\nexport default App;\n\nconst PageStyle = styled.div`\n    margin-top: 50px;\n    text-align: center;\n    font-family: Fira code,Fira Mono,Consolas,Menlo,Courier,monospace;\n`\n\nconst EditorContainer = styled.div`\n    margin-top: 40px;\n    max-height: 400px;\n    overflow: auto;\n`\n\nconst DataTypeContainer = styled.div`\n    margin-top: 20px;\n`\n\nconst FlexContainer = styled.div`\n    display: flex;\n    max-width: 600px;\n    margin: 50px auto 0 auto;\n    justify-content: space-evenly;\n    border: 1px solid rgba(0,0,0,.2);\n    padding: 20px;\n`\n\nconst ResContainer = styled.div`\n    min-height: 125px;\n`\n\nconst Select = styled.select`\n    font-family: Fira code,Fira Mono,Consolas,Menlo,Courier,monospace;\n    margin-left: 10px;\n    margin-right: 30px;\n    padding: 5px;\n    border: 1px solid rgba(0,0,0,.2);\n`\n\nconst Button = styled.button`\n    font-family: Fira code,Fira Mono,Consolas,Menlo,Courier,monospace;\n    padding: 5px;\n    border: 1px solid rgba(0,0,0,.2);\n`","// Libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Components\nimport App from './App';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);","/**\n *   REQUIRES\n */ \n\nconst esprima = require('esprima');\nconst escodegen = require('escodegen');\nconst estraverse = require('estraverse');\n\nfunction getBigO(dataType, code){\n\n    // Default for error\n        let error = \"none\";\n\n    // Char sets\n        const alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n        // const alnum = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        // const num = '0123456789';\n\n    // Declare data sets\n        let sets = [];\n        let n = [ 256, 512, 1024, 2048, 4096];\n        //64, 128,\n\n    // Populate data sets\n        switch(dataType) {\n\n            case \"integer\":\n                sets = n;\n                break;\n\n            case \"array-ints\":\n                for (let i=0; i<n.length; i++){\n                    let arr = [];\n                    for (let j=0; j<n[i]; j++) {\n                        arr.push(Math.floor(Math.random()*9))\n                    }\n                    sets[i] = arr;\n                }\n                break;\n\n            case \"string\":\n                for (let i=0; i<n.length; i++){\n                    let str = '';\n                    for (let j=0; j<n[i]; j++) {\n                        str += alpha.charAt(Math.floor(Math.random() * alpha.length));\n                    }\n                    sets[i] = str;\n                }\n                break;\n\n            case \"array-strs\":\n                for (let i=0; i<n.length; i++){\n                    let count = n[i];\n                    let arr = [];\n                    while (count>0) {\n                        let str = '';\n                        for (let j=0; j<n[i]; j++){\n                            str += alpha.charAt(Math.floor(Math.random() * alpha.length));\n                        }\n                        arr.push(str);\n                        count--;\n                    }\n                    sets[i] = arr;\n                }\n                break;\n\n            default:\n                break;\n        }\n\n    //What if they do not use ; and the string that's sent to here includes \\n ... something like \"function foo() {let sum=0\\n let splitter = value.toString().split(\"\") .... etc.}\"\n    //what if they use \"\" in the code \n    //what about +=, -=\n    \n    // CREATE AST\n\n        const ast = esprima.parse(`${code}`);\n\n    // MODIFY AST\n\n        estraverse.traverse(ast, {\n            enter: function(node) {\n                if (node.type === \"BlockStatement\") {\n                    injectBlockStatements(node);\n                }\n            }\n        });\n\n\n        // MUST change arrow functions to named functions because the parser add ; to the end of an arrow function (donno why?!) and i'm unable to immediately invoke\n\n        function injectBlockStatements(node) {\n            let addCounter = {\n                type: 'ExpressionStatement', \n                expression: {\n                    type:'AssignmentExpression',\n                    left: {name: 'counter', type: 'Identifier'},\n                    operator: '+=',\n                    right: {value: 1, type: 'Literal'}\n                }\n            }\n            return node.body.unshift(addCounter)\n        }\n\n\n    // CODE GEN / UNPARSE\n\n        const modified = escodegen.generate(ast).replaceAll(\"\\n\", \"\");\n\n\n    //  CALCULATE BIG O APPROX\n\n        // grab counters\n        const counters = [];\n        for (let i=0; i<n.length; i++) {\n            counters.push(eval(`(()=>{\n                let counter = 0; \n                (${modified})(sets[${i}]); \n                return counter;\n                })()`)\n            );\n        }\n        \n        let c1 = counters[counters.length-1];\n        let c2 = counters[counters.length-2];\n        let c3 = counters[counters.length-3];\n\n        let n1 = n[counters.length-1];\n        let n2 = n[counters.length-2];\n        let n3 = n[counters.length-3];\n\n        console.log(\"n\", n);\n        console.log(\"counters\", counters);\n\n        let bigOEst;\n\n        if ((c1 - c2) === 0) {\n            bigOEst = \"O(1)\";\n        }\n        // Can do this because data sets successively double in size\n        else if ((c1 - c2) === (c2 - c3)) {\n            bigOEst = \"O(log(n))\";\n        }\n\n        /**\n         * ADD sqrt(n)\n         */\n\n        // dividing by the *difference between the last 2 ns*, then making sure the result is less than that difference, ensures that this isn't a power of n\n        else if ((c1 - c2) / (n1 - n2) < n1 - n2) {\n            bigOEst = \"O(n)\";\n        }\n\n        /**\n         * ADD nlog(n)\n         */\n\n        // This accounts for multiples of n^2, but not n^3 or more :)\n        else if(((c1-c2)/(n1 - n2)) / (2*((c2-c3)/(n2 - n3))) <= 1){\n            bigOEst = \"O(n^2)\";\n        }\n        else {\n            error = \"Looks like the function you entered has n^3 or greater time!\"\n        }\n\n    return {error: error, bigOEst: bigOEst, hotLines: [\"Coming Soon\"]}\n}\n\n\nexport { esprima, escodegen, estraverse, getBigO }"],"sourceRoot":""}